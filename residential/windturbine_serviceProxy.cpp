// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <memory>
#include <staff/utils/SharedPtr.h>
#include <staff/utils/Log.h>
#include <staff/utils/fromstring.h>
#include <staff/utils/tostring.h>
#include <staff/utils/HexBinary.h>
#include <staff/utils/Base64Binary.h>
#include <staff/common/DataObject.h>
#include <staff/common/Attribute.h>
#include <staff/common/Operation.h>
#include <staff/common/Exception.h>
#include <staff/client/ServiceFactory.h>
#include <staff/client/IProxyAllocator.h>
#include <staff/client/ICallback.h>
#include <staff/client/Options.h>
#include "windturbine_serviceProxy.h"

namespace staff
{

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// classes implementation

namespace energy
{
namespace WindTurbine
{


// proxy allocator
class windturbine_serviceProxyAllocator: public staff::IProxyAllocator
{
public:
  windturbine_serviceProxyAllocator()
  {
    try
    {
      staff::ServiceFactory::Inst().RegisterProxyAllocator(typeid(windturbine_service).name(), *this);
    }
    STAFF_CATCH_ALL_DESCR("Failed to register proxy allocator windturbine_service");
  }

  virtual staff::IService* AllocateProxy(const std::string& sServiceUri,
                                         const std::string& sSessionId,
                                         const std::string& sInstanceId)
  {
    std::auto_ptr<windturbine_serviceProxy> tpProxy(new windturbine_serviceProxy);
    tpProxy->Init(sServiceUri, sSessionId, sInstanceId);
    return tpProxy.release();
  }

  virtual staff::IService* AllocateProxy(const std::string& sBaseUri,
                                         const std::string& sServiceName,
                                         const std::string& sSessionId,
                                         const std::string& sInstanceId)
  {
    std::auto_ptr<windturbine_serviceProxy> tpProxy(new windturbine_serviceProxy);
    tpProxy->Init(sBaseUri + (sServiceName.empty() ? "energy.WindTurbine.windturbine_service" : sServiceName),
                  sSessionId, sInstanceId);
    return tpProxy.release();
  }
};

windturbine_serviceProxyAllocator twindturbine_serviceProxyAllocatorInitializer;

// asynch proxies


// service proxy
windturbine_serviceProxy::windturbine_serviceProxy()
{
}

windturbine_serviceProxy::~windturbine_serviceProxy()
{
  try
  {
    Deinit();
  }
  STAFF_CATCH_ALL;
}

void windturbine_serviceProxy::Init(const std::string& sServiceUri, const std::string& sSessionId, const std::string& sInstanceId)
{
  staff::IService::Init("energy.WindTurbine.windturbine_service", sSessionId, sInstanceId);
  m_sServiceUri = !sServiceUri.empty() ? sServiceUri : "http://10.96.12.47:9090/axis2/services/energy.WindTurbine.windturbine_service";
  m_tClient.Init(m_sServiceUri);
  staff::Options& rOptions = m_tClient.GetOptions();
  rOptions.SetDefaultNamespace("http://tempui.org/energy.WindTurbine", "");
  rOptions.SetSoapVersion(staff::Options::Soap11);

  rOptions.SetSessionId(sSessionId);

  if (!sInstanceId.empty())
  {
    staff::Operation tOperation("CreateInstance");
    tOperation.Request().CreateChild("sInstanceId").SetText(sInstanceId);
    tOperation.SetResponse(m_tClient.Invoke(tOperation.Request()));
    if (m_tClient.GetLastResponseHasFault())
    {
      STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                             tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
      STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " +
                  tOperation.GetResponse().ToString()); // other fault
    }
    rOptions.SetInstanceId(sInstanceId);
  }
}

void windturbine_serviceProxy::Deinit()
{
  if (!staff::IService::GetInstanceId().empty())
  {
    staff::Operation tOperation("FreeInstance");
    tOperation.Request().CreateChild("sInstanceId").SetText(staff::IService::GetInstanceId());
    tOperation.SetResponse(m_tClient.Invoke(tOperation.Request()));
    if (m_tClient.GetLastResponseHasFault())
    {
      STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                             tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
      STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " +
                  tOperation.GetResponse().ToString()); // other fault
    }
  }
}

staff::ServiceClient* windturbine_serviceProxy::GetClient()
{
  return &m_tClient;
}


double windturbine_serviceProxy::windturb_dgcreate()
{
  staff::Operation tOperation("windturb_dgcreate", "windturb_dgcreateResult");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.SetNamespaceUriGenPrefix("http://tempui.org/energy.WindTurbine");
  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
  double tReturn = 0;
  rdoResult.GetValue(tReturn);
  return tReturn;
}

int windturbine_serviceProxy::windturb_dginit(double pLine_I_A_Re, double pLine_I_A_Im, double pLine_I_B_Re, double pLine_I_B_Im, double pLine_I_C_Re, double pLine_I_C_Im)
{
  staff::Operation tOperation("windturb_dginit", "windturb_dginitResult");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.SetNamespaceUriGenPrefix("http://tempui.org/energy.WindTurbine");
  rdoRequest.CreateChild("pLine_I_A_Re", pLine_I_A_Re);
  rdoRequest.CreateChild("pLine_I_A_Im", pLine_I_A_Im);
  rdoRequest.CreateChild("pLine_I_B_Re", pLine_I_B_Re);
  rdoRequest.CreateChild("pLine_I_B_Im", pLine_I_B_Im);
  rdoRequest.CreateChild("pLine_I_C_Re", pLine_I_C_Re);
  rdoRequest.CreateChild("pLine_I_C_Im", pLine_I_C_Im);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
  int tReturn = 0;
  rdoResult.GetValue(tReturn);
  return tReturn;
}

double windturbine_serviceProxy::windturb_dgsync(double pCircuit_V_A_Re, double pCircuit_V_A_Im, double pCircuit_V_B_Re, double pCircuit_V_B_Im, double pCircuit_V_C_Re, double pCircuit_V_C_Im)
{
  staff::Operation tOperation("windturb_dgsync", "windturb_dgsyncResult");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.SetNamespaceUriGenPrefix("http://tempui.org/energy.WindTurbine");
  rdoRequest.CreateChild("pCircuit_V_A_Re", pCircuit_V_A_Re);
  rdoRequest.CreateChild("pCircuit_V_A_Im", pCircuit_V_A_Im);
  rdoRequest.CreateChild("pCircuit_V_B_Re", pCircuit_V_B_Re);
  rdoRequest.CreateChild("pCircuit_V_B_Im", pCircuit_V_B_Im);
  rdoRequest.CreateChild("pCircuit_V_C_Re", pCircuit_V_C_Re);
  rdoRequest.CreateChild("pCircuit_V_C_Im", pCircuit_V_C_Im);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
  double tReturn = 0;
  rdoResult.GetValue(tReturn);
  return tReturn;
}

int windturbine_serviceProxy::windturb_dg_postsync(int t0, int t1)
{
  staff::Operation tOperation("windturb_dg_postsync", "windturb_dg_postsyncResult");
  staff::DataObject& rdoRequest = tOperation.Request();
  rdoRequest.SetNamespaceUriGenPrefix("http://tempui.org/energy.WindTurbine");
  rdoRequest.CreateChild("t0", t0);
  rdoRequest.CreateChild("t1", t1);

  // synchronous call
  tOperation.SetResponse(m_tClient.Invoke(rdoRequest));
  if (m_tClient.GetLastResponseHasFault())
  {
    STAFF_ASSERT_SOAPFAULT(!tOperation.IsFault(), tOperation.GetFaultCode(),
                           tOperation.GetFaultString(), tOperation.GetFaultDetail()); // soap fault
    STAFF_THROW(::staff::RemoteException, "Failed to invoke service: " + tOperation.GetResponse().ToString()); // other fault
  }

  const staff::DataObject& rdoResult = tOperation.ResultOpt();
  int tReturn = 0;
  rdoResult.GetValue(tReturn);
  return tReturn;
}
}
}


